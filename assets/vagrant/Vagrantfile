# -*- mode: ruby -*-
# vi: set ft=ruby :

# Parts of this file are taken from https://github.com/kubernetes/kubernetes/blob/master/Vagrantfile

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Require a recent version of vagrant otherwise some have reported errors setting host names on boxes
Vagrant.require_version ">= 1.7.4"

if ARGV.first == "up" && ENV['ROBO_USE_SCRIPTS'] != 'true'
  raise Vagrant::Errors::VagrantError.new, <<END
Calling 'vagrant up' directly is not supported.  Instead, please run the following:

  export ROBO_PROVISIONER=vagrant
  export ROBO_SCRIPT_PATH=/path/to/this/Vagrantfile
  ./e2e.test
END
end

# The number of nodes to provision
$vm_num_nodes = (ENV['ROBO_NUM_NODES'] || 1).to_i

# Give access to all physical cpu cores
# Rewritten to actually determine the number of hardware cores instead of assuming
# that the host has hyperthreading enabled.
host = RbConfig::CONFIG['host_os']
$vm_cpus = 1
if host =~ /linux/
  $vm_cpus = `cat /proc/cpuinfo | grep 'core id' | sort -u | wc -l`.to_i
  if $vm_cpus < 1
      $vm_cpus = `nproc`.to_i
  end
end

# RAM to use for nodes in MB
$vm_node_mem = 2200

# Box to boot
$vm_box = ENV['ROBO_VAGRANT_BOX'] || 'centos/7'

# Size of automatically attache disk devices (10Gb by default)
$vm_device_size = (ENV['ROBO_VAGRANT_DEVICE_SIZE'] || 10).to_i

# IP address configuration
$vm_node_ip_base = ENV['ROBO_NODE_IP_BASE'] || "172.28.128.1"
$vm_node_ips = $vm_num_nodes.times.collect { |n| $vm_node_ip_base + "#{n+3}" }

Vagrant.configure(2) do |config|
  # create a new volume (vdi file)
  def attach_media(vb, controller_name, device, sizeMB, port)
    vdi_file = vb.name + device + ".vdi"
    unless File.exist?(vdi_file)
       vb.customize ["createhd", "--filename", vdi_file, "--size", sizeMB * 1024]
    end
    vb.customize ["storageattach", :id, "--storagectl", controller_name, "--port", port,
                  "--device", 0, "--type", "hdd", "--medium", vdi_file]
  end

  def attach_libvirt_media(box, node_name, device, size)
    path = node_name + device + ".qcow2"
    box.storage :file, :size => size, :path => path, :allow_existing => false
  end

  # mount a volume using the specified filesystem on the given device
  def mount_volume(vm, fs, volume, device)
    vm.provision "shell", inline: <<-SHELL
      fs_type=$(blkid -o value -s TYPE /dev/sdb)
      if [ "$fs_type" != "#{fs}" ]; then
          echo mounting #{fs}...
          mkfs.#{fs} -f /dev/#{device}
          mkdir -p #{volume}
          rm -rf #{volume}/*
          mount /dev/#{device} #{volume}
          if ! grep -q "#{fs}" /etc/fstab ; then
             echo "/dev/#{device} #{volume}  #{fs} defaults   0 0" >> /etc/fstab
          fi
      fi
  SHELL
  end

  def create_node(vm, node_name, cpus, ram_mb, node_ip)
    vm.define node_name do |node|
      node.vm.hostname = node_name
      node.vm.network "private_network", ip: "#{node_ip}"
      node.vm.provider :libvirt do |box|
        box.cpus = cpus
        box.memory = ram_mb
        attach_libvirt_media(box, node_name, "vdb", $vm_device_size) # /var/lib/gravity
        attach_libvirt_media(box, node_name, "vdc", $vm_device_size) # direct-lvm partition, no fs
      end
      node.vm.provider "virtualbox" do |vb|
        vb.name = node.vm.hostname
        vb.cpus = cpus
        vb.memory = ram_mb
        attach_media(vb, "SATA Controller", "sdb", $vm_device_size, 1) # /var/lib/gravity
        attach_media(vb, "SATA Controller", "sdc", $vm_device_size, 2) # direct-lvm partition, no fs
      end
    end
  end

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  # config.vm.box = "boxcutter/centos72"
  config.vm.box = $vm_box

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network
  #config.vm.network "private_network", type: "dhcp"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.

  config.vm.provision "shell", inline: <<-SHELL
    # yum -y install net-tools
    # set up system device
    if lsblk -n /dev/vdb; then
      device=vdb
    else
      device=sdb
    fi
    echo system device: /dev/${device}
    umount /dev/${device} || true
    mkfs.xfs -f /dev/${device}
    sed -i.bak "/${device}/d" /etc/fstab
    echo -e "/dev/${device}\t/var/lib/gravity\txfs\tdefaults\t0\t2" >> /etc/fstab
    mkdir -p /var/lib/gravity
    mount /var/lib/gravity
    chown -R 1000:1000 /var/lib/gravity
    sed -i.bak "s/Defaults    requiretty/#Defaults    requiretty/g" /etc/sudoers

    /usr/sbin/ip route add 10.100.0.0/16 dev eth0 || true
    /usr/sbin/ip route add 10.100.0.0/16 dev enp0s8 || true
    echo $(ip route | grep default | awk '{print $3}') opscenter.localhost.localdomain >> /etc/hosts
  SHELL

  # Don't attempt to update Virtualbox Guest Additions (requires gcc)
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.vm.synced_folder ".", "/vagrant", type: "rsync"

  $vm_num_nodes.times do |n|
    node_ip = $vm_node_ips[n]
    node_vm_name = "node-#{n+1}"
    create_node(config.vm, node_vm_name, $vm_cpus, $vm_node_mem, node_ip)
  end
end
